import { contextBridge, ipcRenderer } from 'electron'

// APIs para notificaÃ§Ãµes do sistema via IPC
contextBridge.exposeInMainWorld('electronAPI', {
  // Verificar se notificaÃ§Ãµes sÃ£o suportadas
  isNotificationSupported: async () => {
    console.log('ðŸ”” preload: isNotificationSupported chamado')
    try {
      const result = await ipcRenderer.invoke('notifications:isSupported')
      console.log('ðŸ”” preload: Suporte via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”” preload: Erro ao verificar suporte:', error)
      return false
    }
  },
  
  // Solicitar permissÃ£o para notificaÃ§Ãµes
  requestNotificationPermission: async () => {
    console.log('ðŸ”” preload: requestNotificationPermission chamado')
    try {
      const result = await ipcRenderer.invoke('notifications:requestPermission')
      console.log('ðŸ”” preload: PermissÃ£o solicitada via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”” preload: Erro ao solicitar permissÃ£o:', error)
      return 'denied'
    }
  },
  
  // Verificar permissÃ£o atual
  getNotificationPermission: async () => {
    console.log('ðŸ”” preload: getNotificationPermission chamado')
    try {
      const result = await ipcRenderer.invoke('notifications:getPermission')
      console.log('ðŸ”” preload: PermissÃ£o atual via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”” preload: Erro ao verificar permissÃ£o:', error)
      return 'denied'
    }
  },
  
  // Enviar notificaÃ§Ã£o do sistema
  sendSystemNotification: async (title: string, options?: NotificationOptions) => {
    try {
      const result = await ipcRenderer.invoke('notifications:send', title, options)
      console.log('ðŸ”” preload: NotificaÃ§Ã£o enviada via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”” preload: Erro ao enviar notificaÃ§Ã£o:', error)
      return null
    }
  },
  
  // NotificaÃ§Ã£o especÃ­fica para perda de foco
  notifyFocusLoss: async (level: string) => {
    console.log('ðŸ”” preload: notifyFocusLoss chamado com nÃ­vel:', level)
    try {
      const result = await ipcRenderer.invoke('notifications:notifyFocusLoss', level)
      console.log('ðŸ”” preload: NotificaÃ§Ã£o de perda de foco via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”” preload: Erro ao notificar perda de foco:', error)
      return null
    }
  }
})

// API para overlay transparente sempre-no-topo
contextBridge.exposeInMainWorld('overlay', {
  flash: async (ms = 600) => {
    console.log('ðŸ”´ preload: overlay.flash chamado com duraÃ§Ã£o:', ms)
    try {
      const result = await ipcRenderer.invoke('overlay:flash', ms)
      console.log('ðŸ”´ preload: Flash do overlay via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”´ preload: Erro ao fazer flash do overlay:', error)
      return false
    }
  },
  
  show: async () => {
    console.log('ðŸ”´ preload: overlay.show chamado')
    try {
      const result = await ipcRenderer.invoke('overlay:show')
      console.log('ðŸ”´ preload: Show do overlay via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”´ preload: Erro ao mostrar overlay:', error)
      return false
    }
  },
  
  hide: async () => {
    console.log('ðŸ”´ preload: overlay.hide chamado')
    try {
      const result = await ipcRenderer.invoke('overlay:hide')
      console.log('ðŸ”´ preload: Hide do overlay via IPC:', result)
      return result
    } catch (error) {
      console.error('ðŸ”´ preload: Erro ao esconder overlay:', error)
      return false
    }
  }
})

// Manter isolado; o renderer usa getUserMedia normalmente
export {}
