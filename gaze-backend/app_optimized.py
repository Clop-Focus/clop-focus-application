"""
Aplica√ß√£o FastAPI otimizada para melhor performance no Mac M1.
Inclui middleware de performance, m√∫ltiplos workers e m√©tricas.
"""

from fastapi import FastAPI, File, Form, HTTPException, UploadFile, BackgroundTasks, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import os
import multiprocessing
from typing import Optional, Dict, Any

# Importar m√≥dulos otimizados
from gaze_optimized import infer_gaze_optimized, process_base64_frame_optimized
from calibration import set_calibration, get_offsets, apply_offsets
from ws import stream_ws, get_connection_count, get_fps_info
from performance import PerformanceMiddleware, get_performance_metrics, reset_performance_metrics
from queue_processor import async_frame_processor
from gaze_websocket_server import gaze_websocket_endpoint, get_gaze_manager, get_active_sessions_count

# Configura√ß√µes de performance
CPU_COUNT = os.cpu_count()
RECOMMENDED_WORKERS = min(4, CPU_COUNT) if CPU_COUNT else 1

# Criar aplica√ß√£o FastAPI otimizada
app = FastAPI(
    title="Gaze Backend - Otimizado",
    description="Backend otimizado para estima√ß√£o de gaze usando MediaPipe FaceMesh no Mac M1",
    version="2.0.0"
)

# Adicionar middleware de performance
app.add_middleware(PerformanceMiddleware)

# Configurar CORS para desenvolvimento
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Event handlers para startup/shutdown
@app.on_event("startup")
async def startup_event():
    """Evento de inicializa√ß√£o da aplica√ß√£o."""
    print("üöÄ Gaze Backend Otimizado iniciando...")
    print(f"üîß CPU Count: {CPU_COUNT}")
    print(f"üë• Workers recomendados: {RECOMMENDED_WORKERS}")
    print(f"üìä Performance monitoring ativado")
    print(f"üîÑ Frame queue processor ativado")
    print(f"üëÅÔ∏è Gaze WebSocket endpoints ativados")


@app.on_event("shutdown")
async def shutdown_event():
    """Evento de shutdown da aplica√ß√£o."""
    print("üõë Gaze Backend Otimizado finalizando...")


@app.get("/health")
async def health_check():
    """
    Endpoint de sa√∫de da aplica√ß√£o com informa√ß√µes de performance.
    
    Returns:
        Status da aplica√ß√£o e m√©tricas b√°sicas
    """
    return {
        "status": "ok",
        "version": "2.0.0",
        "optimizations": {
            "performance_monitoring": True,
            "frame_queue_processor": True,
            "mediapipe_singleton": True,
            "recommended_workers": RECOMMENDED_WORKERS,
            "gaze_websocket": True
        }
    }


@app.post("/gaze")
async def process_gaze_optimized(
    frame: UploadFile = File(..., description="Frame da webcam"),
    session_id: str = Form(..., description="ID √∫nico da sess√£o"),
    background_tasks: BackgroundTasks = None
):
    """
    Processa frame da webcam para estimar gaze com otimiza√ß√µes de performance.
    
    Args:
        frame: Arquivo de imagem da webcam
        session_id: ID √∫nico da sess√£o para calibra√ß√£o
        background_tasks: Tarefas em background do FastAPI
        
    Returns:
        Resultado da infer√™ncia de gaze com calibra√ß√£o aplicada
    """
    try:
        # Validar tipo de arquivo
        if not frame.content_type or not frame.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400, 
                detail="Arquivo deve ser uma imagem v√°lida"
            )
        
        # Ler bytes da imagem
        image_bytes = await frame.read()
        
        if not image_bytes:
            raise HTTPException(
                status_code=400, 
                detail="Arquivo de imagem vazio"
            )
        
        # Processar imagem com vers√£o otimizada
        result = infer_gaze_optimized(image_bytes)
        
        # Verificar se houve erro na infer√™ncia
        if "error" in result:
            return JSONResponse(
                status_code=400,
                content=result
            )
        
        # Aplicar calibra√ß√£o da sess√£o
        result = apply_offsets(result, session_id)
        
        # Adicionar m√©tricas de performance ao resultado
        result["performance"] = {
            "optimized": True,
            "version": "2.0.0"
        }
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao processar imagem: {str(e)}"
        )


@app.post("/gaze/queue")
async def submit_frame_to_queue(
    frame: UploadFile = File(..., description="Frame da webcam"),
    session_id: str = Form(..., description="ID √∫nico da sess√£o"),
    priority: int = Form(0, description="Prioridade do frame (0-10)")
):
    """
    Submete frame para processamento em fila otimizada.
    
    Args:
        frame: Arquivo de imagem da webcam
        session_id: ID √∫nico da sess√£o
        priority: Prioridade do frame (0-10)
        
    Returns:
        ID do request enfileirado
    """
    try:
        # Validar tipo de arquivo
        if not frame.content_type or not frame.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400, 
                detail="Arquivo deve ser uma imagem v√°lida"
            )
        
        # Ler bytes da imagem
        image_bytes = await frame.read()
        
        if not image_bytes:
            raise HTTPException(
                status_code=400, 
                detail="Arquivo de imagem vazio"
            )
        
        # Submeter para fila de processamento
        request_id = await async_frame_processor.submit_frame_async(
            frame_data=image_bytes,
            session_id=session_id,
            priority=priority
        )
        
        if request_id is None:
            raise HTTPException(
                status_code=503,
                detail="Fila de processamento cheia, tente novamente"
            )
        
        return {
            "ok": True,
            "request_id": request_id,
            "message": "Frame enfileirado para processamento",
            "queue_status": await async_frame_processor.get_queue_status_async()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao enfileirar frame: {str(e)}"
        )


@app.post("/calibrate")
async def calibrate_gaze_optimized(
    frame: UploadFile = File(..., description="Frame de refer√™ncia para calibra√ß√£o"),
    label: str = Form(..., description="Tipo de calibra√ß√£o (center)"),
    session_id: str = Form(..., description="ID √∫nico da sess√£o")
):
    """
    Calibra o sistema de gaze para uma sess√£o espec√≠fica (otimizado).
    
    Args:
        frame: Frame de refer√™ncia para calibra√ß√£o
        label: Tipo de calibra√ß√£o (para V1, apenas "center")
        session_id: ID √∫nico da sess√£o
        
    Returns:
        Offsets de calibra√ß√£o aplicados
    """
    try:
        # Validar tipo de arquivo
        if not frame.content_type or not frame.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400, 
                detail="Arquivo deve ser uma imagem v√°lida"
            )
        
        # Validar label de calibra√ß√£o
        if label != "center":
            raise HTTPException(
                status_code=400,
                detail="Para V1, apenas calibra√ß√£o 'center' √© suportada"
            )
        
        # Ler bytes da imagem
        image_bytes = await frame.read()
        
        if not image_bytes:
            raise HTTPException(
                status_code=400, 
                detail="Arquivo de imagem vazio"
            )
        
        # Processar imagem com vers√£o otimizada
        sample_gaze = infer_gaze_optimized(image_bytes)
        
        # Verificar se houve erro na infer√™ncia
        if "error" in sample_gaze:
            return JSONResponse(
                status_code=400,
                content=sample_gaze
            )
        
        # Definir calibra√ß√£o para a sess√£o
        offsets = set_calibration(session_id, sample_gaze, label)
        
        return {
            "ok": True,
            "message": f"Calibra√ß√£o '{label}' aplicada para sess√£o {session_id}",
            "offsets": offsets,
            "session_id": session_id,
            "optimized": True
        }
        
    except HTTPException:
        raise
    except ValueError as e:
        raise HTTPException(
            status_code=400,
            detail=str(e)
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno na calibra√ß√£o: {str(e)}"
        )


@app.get("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """
    Endpoint WebSocket para streaming de gaze em tempo real.
    
    Args:
        websocket: Conex√£o WebSocket
    """
    await stream_ws(websocket)


@app.websocket("/gaze/ws/{session_id}")
async def gaze_websocket_endpoint_route(websocket: WebSocket, session_id: str):
    """
    Endpoint WebSocket espec√≠fico para gaze detection com an√°lise de foco.
    
    Args:
        websocket: Conex√£o WebSocket
        session_id: ID √∫nico da sess√£o
    """
    await gaze_websocket_endpoint(websocket, session_id)


@app.get("/gaze/sessions")
async def get_gaze_sessions():
    """
    Obt√©m informa√ß√µes sobre todas as sess√µes de gaze ativas.
    
    Returns:
        Lista de sess√µes ativas com estat√≠sticas
    """
    gaze_manager = get_gaze_manager()
    return gaze_manager.get_all_stats()


@app.get("/gaze/session/{session_id}")
async def get_gaze_session_stats(session_id: str):
    """
    Obt√©m estat√≠sticas de uma sess√£o espec√≠fica de gaze.
    
    Args:
        session_id: ID da sess√£o
        
    Returns:
        Estat√≠sticas da sess√£o
    """
    gaze_manager = get_gaze_manager()
    stats = gaze_manager.get_session_stats(session_id)
    
    if stats:
        return stats
    else:
        raise HTTPException(
            status_code=404,
            detail=f"Sess√£o {session_id} n√£o encontrada"
        )


@app.get("/metrics")
async def get_metrics():
    """
    Endpoint para m√©tricas de performance (estilo Prometheus).
    
    Returns:
        M√©tricas detalhadas de performance
    """
    return {
        "performance": get_performance_metrics(),
        "queue": await async_frame_processor.get_stats_async(),
        "gaze_sessions": get_gaze_manager().get_all_stats(),
        "system": {
            "cpu_count": CPU_COUNT,
            "recommended_workers": RECOMMENDED_WORKERS,
            "optimizations_enabled": True
        }
    }


@app.post("/metrics/reset")
async def reset_metrics():
    """
    Reseta m√©tricas de performance.
    
    Returns:
        Confirma√ß√£o de reset
    """
    reset_performance_metrics()
    return {"message": "M√©tricas de performance resetadas"}


@app.get("/queue/status")
async def get_queue_status():
    """
    Obt√©m status da fila de processamento.
    
    Returns:
        Status detalhado da fila
    """
    return await async_frame_processor.get_queue_status_async()


@app.get("/status")
async def get_status():
    """
    Endpoint para obter status da aplica√ß√£o e estat√≠sticas.
    
    Returns:
        Status da aplica√ß√£o e estat√≠sticas
    """
    return {
        "status": "ok",
        "version": "2.0.0",
        "optimizations": {
            "performance_monitoring": True,
            "frame_queue_processor": True,
            "mediapipe_singleton": True,
            "gaze_websocket": True
        },
        "websocket_connections": get_connection_count(),
        "fps_info": get_fps_info(),
        "queue_status": await async_frame_processor.get_queue_status_async(),
        "gaze_sessions": get_gaze_manager().get_all_stats(),
        "endpoints": {
            "health": "/health",
            "gaze": "/gaze",
            "gaze_queue": "/gaze/queue",
            "calibrate": "/calibrate",
            "websocket": "/ws",
            "gaze_websocket": "/gaze/ws/{session_id}",
            "gaze_sessions": "/gaze/sessions",
            "gaze_session_stats": "/gaze/session/{session_id}",
            "metrics": "/metrics",
            "queue_status": "/queue/status",
            "status": "/status"
        }
    }


@app.get("/")
async def root():
    """
    Endpoint raiz com informa√ß√µes da API otimizada.
    
    Returns:
        Informa√ß√µes b√°sicas da API
    """
    return {
        "name": "Gaze Backend - Otimizado",
        "version": "2.0.0",
        "description": "Backend otimizado para estima√ß√£o de gaze usando MediaPipe FaceMesh no Mac M1",
        "optimizations": [
            "Performance monitoring com timers",
            "Frame queue processor com drop de frames",
            "MediaPipe singleton para evitar reinicializa√ß√£o",
            "M√∫ltiplos workers recomendados",
            "Core ML support via ONNX (quando dispon√≠vel)",
            "Gaze WebSocket em tempo real",
            "Detec√ß√£o autom√°tica de perda de foco"
        ],
        "docs": "/docs",
        "metrics": "/metrics",
        "endpoints": [
            "GET /health",
            "POST /gaze",
            "POST /gaze/queue",
            "POST /calibrate", 
            "GET /ws",
            "GET /gaze/ws/{session_id}",
            "GET /gaze/sessions",
            "GET /gaze/session/{session_id}",
            "GET /metrics",
            "GET /queue/status",
            "GET /status"
        ]
    }


if __name__ == "__main__":
    # Executar aplica√ß√£o otimizada
    print(f"üöÄ Iniciando Gaze Backend Otimizado...")
    print(f"üîß CPU Count: {CPU_COUNT}")
    print(f"üë• Workers recomendados: {RECOMMENDED_WORKERS}")
    print(f"üí° Para produ√ß√£o, use: uvicorn app_optimized:app --workers {RECOMMENDED_WORKERS}")
    
    uvicorn.run(
        "app_optimized:app",
        host="0.0.0.0",
        port=8000,
        reload=False,  # Desabilitar reload para produ√ß√£o
        log_level="info"
    )
