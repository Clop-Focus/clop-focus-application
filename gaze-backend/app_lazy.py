"""
Vers√£o com lazy-load para evitar travamentos no startup.
Carrega os m√≥dulos pesados apenas quando necess√°rio.
"""

from fastapi import FastAPI, File, Form, HTTPException, UploadFile, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import threading
import time
import json
import base64
import asyncio

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Gaze Backend - Lazy Load",
    description="Backend com carregamento sob demanda",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Estado global para lazy-load
gaze_module = None
calibration_module = None
ready = False
loading = False

# Gerenciador de sess√µes WebSocket
websocket_sessions = {}

def load_modules():
    """Carrega m√≥dulos pesados em background."""
    global gaze_module, calibration_module, ready, loading
    
    if loading:
        return
    
    loading = True
    try:
        print("üîÑ Carregando m√≥dulos pesados...")

        # Importar m√≥dulos robustos de gaze detection
        from gaze_roboflow import infer_gaze_roboflow
        from calibration import set_calibration, get_offsets, apply_offsets

        gaze_module = {
            'infer_gaze': infer_gaze_roboflow
        }

        calibration_module = {
            'set_calibration': set_calibration,
            'get_offsets': get_offsets,
            'apply_offsets': apply_offsets
        }

        ready = True
        print("‚úÖ M√≥dulos robustos carregados com sucesso!")
        print("üéØ EXTREMA toler√¢ncia configurada!")
        print("üìä Considera 'Na Tela' at√© foco cr√≠tico!")
        print("üëÅÔ∏è Detec√ß√£o robusta da posi√ß√£o dos olhos!")
        print("üì¶ BBox da face inclu√≠do!")

    except Exception as e:
        print(f"‚ùå Erro ao carregar m√≥dulos: {e}")
        ready = False
    finally:
        loading = False

@app.on_event("startup")
async def startup_event():
    """Evento de inicializa√ß√£o - carrega m√≥dulos em thread separada."""
    print("üöÄ Gaze Backend Lazy iniciando...")
    
    # Carregar m√≥dulos em background
    thread = threading.Thread(target=load_modules, daemon=True)
    thread.start()

@app.get("/health")
async def health_check():
    """Endpoint de sa√∫de com status de carregamento."""
    return {
        "status": "ready" if ready else "initializing",
        "loading": loading,
        "version": "1.0.0"
    }

@app.get("/")
async def root():
    """Endpoint raiz."""
    return {
        "message": "Gaze Backend Lazy funcionando!",
        "status": "ready" if ready else "initializing"
    }

@app.websocket("/gaze/ws/{session_id}")
async def gaze_websocket_endpoint(websocket: WebSocket, session_id: str):
    """Endpoint WebSocket para gaze detection em tempo real."""
    if not ready:
        await websocket.close(code=1008, reason="Sistema ainda inicializando")
        return
    
    await websocket.accept()
    print(f"üîå WebSocket conectado para sess√£o: {session_id}")
    
    # Registrar sess√£o
    websocket_sessions[session_id] = websocket
    
    try:
        while True:
            # Receber mensagem do cliente
            message = await websocket.receive_text()
            data = json.loads(message)
            
            if data.get("type") == "frame":
                # Processar frame
                frame_data = data.get("data")
                if frame_data:
                    try:
                        # Decodificar base64
                        frame_bytes = base64.b64decode(frame_data)
                        
                        # Processar com MediaPipe
                        result = gaze_module['infer_gaze'](frame_bytes)
                        
                        if "error" not in result:
                            # Aplicar calibra√ß√£o
                            result = calibration_module['apply_offsets'](result, session_id)
                            
                            # Adicionar timestamp
                            result["timestamp"] = time.time()
                            result["session_id"] = session_id
                            
                            # Enviar resultado
                            await websocket.send_text(json.dumps(result))
                            
                            # Verificar se h√° perda de foco
                            if not result.get("on_screen", True):
                                focus_alert = {
                                    "type": "focus_alert",
                                    "message": "Perda de foco detectada!",
                                    "gaze": result["gaze"],
                                    "attention": result["attention"],
                                    "timestamp": time.time()
                                }
                                await websocket.send_text(json.dumps(focus_alert))
                            
                            # Verificar se h√° erro de detec√ß√£o de rosto
                            elif "error" in result and result["error"] == "no_face":
                                no_face_alert = {
                                    "type": "no_face_alert",
                                    "message": "Rosto n√£o detectado! Verifique a posi√ß√£o da c√¢mera.",
                                    "error": "no_face",
                                    "timestamp": time.time(),
                                    "severity": "warning"
                                }
                                await websocket.send_text(json.dumps(no_face_alert))
                            
                            # Verificar outros erros de detec√ß√£o
                            elif "error" in result:
                                detection_alert = {
                                    "type": "detection_alert",
                                    "message": f"Erro de detec√ß√£o: {result.get('message', 'Erro desconhecido')}",
                                    "error": result["error"],
                                    "timestamp": time.time(),
                                    "severity": "error"
                                }
                                await websocket.send_text(json.dumps(detection_alert))
                            
                        else:
                            # Enviar erro
                            await websocket.send_text(json.dumps(result))
                            
                    except Exception as e:
                        error_msg = {
                            "error": "processing_error",
                            "message": f"Erro ao processar frame: {str(e)}"
                        }
                        await websocket.send_text(json.dumps(error_msg))
            
            elif data.get("type") == "ping":
                # Responder ping
                await websocket.send_text(json.dumps({"type": "pong", "timestamp": time.time()}))
                
    except Exception as e:
        print(f"‚ùå Erro no WebSocket: {e}")
    finally:
        # Remover sess√£o
        if session_id in websocket_sessions:
            del websocket_sessions[session_id]
        print(f"üîå WebSocket desconectado para sess√£o: {session_id}")

@app.get("/websocket/sessions")
async def get_websocket_sessions():
    """Lista sess√µes WebSocket ativas."""
    return {
        "active_sessions": list(websocket_sessions.keys()),
        "count": len(websocket_sessions)
    }

@app.post("/gaze")
async def process_gaze(
    frame: UploadFile = File(..., description="Frame da webcam"),
    session_id: str = Form(..., description="ID √∫nico da sess√£o")
):
    """Processa frame da webcam (lazy-load)."""
    if not ready:
        raise HTTPException(
            status_code=503,
            detail="Sistema ainda inicializando. Tente novamente em alguns segundos."
        )
    
    try:
        # Validar tipo de arquivo
        if not frame.content_type or not frame.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400, 
                detail="Arquivo deve ser uma imagem v√°lida"
            )
        
        # Ler bytes da imagem
        image_bytes = await frame.read()
        
        if not image_bytes:
            raise HTTPException(
                status_code=400, 
                detail="Arquivo de imagem vazio"
            )
        
        # Processar imagem
        result = gaze_module['infer_gaze'](image_bytes)
        
        # Verificar se houve erro na infer√™ncia
        if "error" in result:
            return JSONResponse(
                status_code=400,
                content=result
            )
        
        # Aplicar calibra√ß√£o da sess√£o
        result = calibration_module['apply_offsets'](result, session_id)
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao processar imagem: {str(e)}"
        )

@app.post("/calibrate")
async def calibrate_gaze(
    frame: UploadFile = File(..., description="Frame de refer√™ncia para calibra√ß√£o"),
    label: str = Form(..., description="Tipo de calibra√ß√£o (center)"),
    session_id: str = Form(..., description="ID √∫nico da sess√£o")
):
    """Calibra o sistema de gaze (lazy-load)."""
    if not ready:
        raise HTTPException(
            status_code=503,
            detail="Sistema ainda inicializando. Tente novamente em alguns segundos."
        )
    
    try:
        # Validar tipo de arquivo
        if not frame.content_type or not frame.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400, 
                detail="Arquivo deve ser uma imagem v√°lida"
            )
        
        # Validar label de calibra√ß√£o
        if label != "center":
            raise HTTPException(
                status_code=400,
                detail="Para V1, apenas calibra√ß√£o 'center' √© suportada"
            )
        
        # Ler bytes da imagem
        image_bytes = await frame.read()
        
        if not image_bytes:
            raise HTTPException(
                status_code=400, 
                detail="Arquivo de imagem vazio"
            )
        
        # Processar imagem
        sample_gaze = gaze_module['infer_gaze'](image_bytes)
        
        # Verificar se houve erro na infer√™ncia
        if "error" in sample_gaze:
            return JSONResponse(
                status_code=400,
                content=sample_gaze
            )
        
        # Definir calibra√ß√£o para a sess√£o
        offsets = calibration_module['set_calibration'](session_id, sample_gaze, label)
        
        return {
            "ok": True,
            "message": f"Calibra√ß√£o '{label}' aplicada para sess√£o {session_id}",
            "offsets": offsets,
            "session_id": session_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno na calibra√ß√£o: {str(e)}"
        )

@app.get("/status")
async def get_status():
    """Status detalhado da aplica√ß√£o."""
    return {
        "status": "ready" if ready else "initializing",
        "loading": loading,
        "version": "1.0.0",
        "modules": {
            "gaze": gaze_module is not None,
            "calibration": calibration_module is not None
        },
        "websocket_sessions": len(websocket_sessions)
    }
